import encodings
import os
import warnings
import sys
#sys.path.append('inst/lib/python3.5/dist-packages')
#sys.path.append('inst/lib/python3.5/site-packages')
#sys.path.append('inst/lib/python3/site-packages')
# This is a fix for UM and cura installing into 3 instead of 3.5
# This happens for Linux DEB only
sys.path.append("@CMAKE_BINARY_DIR@/inst/lib/python3/dist-packages")
print(sys.path)
from cx_Freeze import setup, Executable

includes = [
	'numpy.core._methods',
	'numpy.lib.format']
excludes = []
packages = []
path = []

import UM
import cura
import os
import glob
import shutil


buildOptions = dict(
	packages = [], 
	excludes = [])

executables = [
    Executable(
	script = "inst/bin/cura2",
	targetName = "cura2"
	)
]

setup(name='Cura2',
      version = "@CURA_MAJOR_VERSION@.@CURA_MINOR_VERSION@.@CURA_PATCH_VERSION@",
      description = 'Cura2 Description',
      options = {"build_exe": {	"includes": includes,
				"excludes": excludes,
				"packages": packages,
				"path": path }
			
		},
      executables = executables
)


#OPTIONS = {
#    "build_exe": {
#        "includes": [
#		"sip",
#		"ctypes",
#		"UM",
#		"cura",
#		"PyQt5.QtNetwork", 
#		"PyQt5._QOpenGLFunctions_2_0", 
#		"serial", 
#		"Arcus", 
#		"xml.etree", 
#		"xml.etree.ElementTree",
#		"zeroconf",
#		"uuid",
#		"Savitar",
#       ],
#        'path': sys.path + ['modules']
#    }
#}

# Extend options.includes to include all files from the UM package.
#for dirpath, dirnames, filenames in os.walk(os.path.dirname(UM.__file__)):
#    if "__" in dirpath:
#        continue
#    module_path = dirpath.replace(os.path.dirname(UM.__file__), "UM")
#    module_path = module_path.split(os.path.sep)
#    module_name = ".".join(module_path)
#    if os.path.isfile(dirpath + "/__init__.py"):
#        OPTIONS["includes"] += [module_name]
#        for filename in filenames:
#            if "__" in filename or not filename.endswith(".py"):
#                continue
#            OPTIONS["includes"] += [module_name + "." + os.path.splitext(filename)[0]]
#
#for dirpath, dirnames, filenames in os.walk(os.path.dirname(cura.__file__)):
#    if "__" in dirpath:
#        continue
#    module_path = dirpath.replace(os.path.dirname(cura.__file__), "cura")
#    module_path = module_path.split(os.path.sep)
#    module_name = ".".join(module_path)
#    if os.path.isfile(dirpath + "/__init__.py"):
#        OPTIONS["includes"] += [module_name]
#        for filename in filenames:
#            if "__" in filename or not filename.endswith(".py"):
#                continue
#            OPTIONS["includes"] += [module_name + "." + os.path.splitext(filename)[0]]
#
#setup(
#    name="Cura",
#    app=["inst/bin/cura_app.py"],
#    version="@CURA_MAJOR_VERSION@.@CURA_MINOR_VERSION@.@CURA_PATCH_VERSION@",
#    author="Ultimaker",
#    url="http://software.ultimaker.com/",
#    license="GNU AFFERO GENERAL PUBLIC LICENSE (AGPL)",
#    options={"build_exe": OPTIONS},
#    setup_requires=['py2app'],
#)

# Copy the backend executable
#print("Copying CuraEngine to Contents/MacOS")
#shutil.copy("inst/bin/CuraEngine", "dist/Cura.app/Contents/MacOS/CuraEngine")

# Remove all *_debug.x.dylib files since we do not need them but py2app copies 
# them anyway.
#for path, dirs, files in os.walk("dist/Cura.app/Contents"):
#    for file in files:
#        if "debug" in file:
#            print("Removing {0}".format(file))
#            os.remove(os.path.join(path, file))

# Py2App does not handle @rpath properly and fails to find the required libraries.
# So we need to copy it manually.
#shutil.copy("inst/lib/libQt5Core.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Core.5.dylib")
#shutil.copy("inst/lib/libQt5Gui.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Gui.5.dylib")
#shutil.copy("inst/lib/libQt5MacExtras.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5MacExtras.5.dylib")
#shutil.copy("inst/lib/libQt5Network.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Network.5.dylib")
#shutil.copy("inst/lib/libQt5OpenGL.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5OpenGL.5.dylib")
#shutil.copy("inst/lib/libQt5Qml.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Qml.5.dylib")
#shutil.copy("inst/lib/libQt5Quick.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Quick.5.dylib")
#shutil.copy("inst/lib/libQt5QuickWidgets.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5QuickWidgets.5.dylib")
#shutil.copy("inst/lib/libQt5Svg.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Svg.5.dylib")
#shutil.copy("inst/lib/libQt5Widgets.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Widgets.5.dylib")
#shutil.copy("inst/lib/libQt5Xml.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5Xml.5.dylib")
#shutil.copy("inst/lib/libQt5DBus.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5DBus.5.dylib")
#shutil.copy("inst/lib/libQt5PrintSupport.5.dylib", "dist/Cura.app/Contents/Frameworks/libQt5PrintSupport.5.dylib")

# Ensure we set the right @rpath value.
#os.system("install_name_tool -add_rpath @executable_path/../Frameworks dist/Cura.app/Contents/MacOS/Cura")
